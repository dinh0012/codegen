<?php
// This file auto-generated by swagger-codegen-crmbase

namespace App;

use App\DefinitionFactory;

class RequestChecker
{
    private static function invalid_array(array $array, $type)
    {
        foreach ($array as $value) {
            if (codegenGetType($value) !== $type) {
                return true;
            }
        }
        return false;
    }

    // Add a new pet to the store
    public static function addPet($request)
    {
        $errors = [];
        if (isset($request->body)) {
            $errors['body']['attrs'] = DefinitionFactory::factory(
                'Pet'
            )->validate($request->body);
        }
        return $errors;
    }

    // Update an existing pet
    public static function updatePet($request)
    {
        $errors = [];
        if (isset($request->body)) {
            $errors['body']['attrs'] = DefinitionFactory::factory(
                'Pet'
            )->validate($request->body);
        }
        return $errors;
    }

    // Multiple status values can be provided with comma separated strings
    public static function findPetsByStatus($request)
    {
        $errors = [];
        if (!isset($request->status)) {
            $error = [
                'status' => 'status is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->status) &&
            codegenGetType($request->status) !== 'array'
        ) {
            $error = [
                'status' =>
                    'status must be array : ' +
                    codegenGetType($request->status),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->status) &&
            self::invalid_array($request->status, 'string')
        ) {
            $error = [
                'status' => 'status items must be string',
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.
    public static function findPetsByTags($request)
    {
        $errors = [];
        if (!isset($request->tags)) {
            $error = [
                'tags' => 'tags is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->tags) &&
            codegenGetType($request->tags) !== 'array'
        ) {
            $error = [
                'tags' =>
                    'tags must be array : ' + codegenGetType($request->tags),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->tags) &&
            self::invalid_array($request->tags, 'string')
        ) {
            $error = [
                'tags' => 'tags items must be string',
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Returns a single pet
    public static function getPetById($request)
    {
        $errors = [];
        if (!isset($request->petId)) {
            $error = [
                'petId' => 'petId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->petId) &&
            codegenGetType($request->petId) !== 'integer'
        ) {
            $error = [
                'petId' =>
                    'petId must be integer : ' +
                    codegenGetType($request->petId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Updates a pet in the store with form data
    public static function updatePetWithForm($request)
    {
        $errors = [];
        if (!isset($request->petId)) {
            $error = [
                'petId' => 'petId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->petId) &&
            codegenGetType($request->petId) !== 'integer'
        ) {
            $error = [
                'petId' =>
                    'petId must be integer : ' +
                    codegenGetType($request->petId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->name) &&
            codegenGetType($request->name) !== 'string'
        ) {
            $error = [
                'name' =>
                    'name must be string : ' + codegenGetType($request->name),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->status) &&
            codegenGetType($request->status) !== 'string'
        ) {
            $error = [
                'status' =>
                    'status must be string : ' +
                    codegenGetType($request->status),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Deletes a pet
    public static function deletePet($request)
    {
        $errors = [];
        if (
            isset($request->api_key) &&
            codegenGetType($request->api_key) !== 'string'
        ) {
            $error = [
                'api_key' =>
                    'api_key must be string : ' +
                    codegenGetType($request->api_key),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (!isset($request->petId)) {
            $error = [
                'petId' => 'petId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->petId) &&
            codegenGetType($request->petId) !== 'integer'
        ) {
            $error = [
                'petId' =>
                    'petId must be integer : ' +
                    codegenGetType($request->petId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // uploads an image
    public static function uploadFile($request)
    {
        $errors = [];
        if (!isset($request->petId)) {
            $error = [
                'petId' => 'petId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->petId) &&
            codegenGetType($request->petId) !== 'integer'
        ) {
            $error = [
                'petId' =>
                    'petId must be integer : ' +
                    codegenGetType($request->petId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->additionalMetadata) &&
            codegenGetType($request->additionalMetadata) !== 'string'
        ) {
            $error = [
                'additionalMetadata' =>
                    'additionalMetadata must be string : ' +
                    codegenGetType($request->additionalMetadata),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (
            isset($request->file) &&
            codegenGetType($request->file) !== 'file'
        ) {
            $error = [
                'file' =>
                    'file must be file : ' + codegenGetType($request->file),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Returns a map of status codes to quantities
    public static function getInventory($request)
    {
        $errors = [];
        return $errors;
    }

    // Place an order for a pet
    public static function placeOrder($request)
    {
        $errors = [];
        if (isset($request->body)) {
            $errors['body']['attrs'] = DefinitionFactory::factory(
                'Order'
            )->validate($request->body);
        }
        return $errors;
    }

    // For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
    public static function getOrderById($request)
    {
        $errors = [];
        if (!isset($request->orderId)) {
            $error = [
                'orderId' => 'orderId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->orderId) &&
            codegenGetType($request->orderId) !== 'integer'
        ) {
            $error = [
                'orderId' =>
                    'orderId must be integer : ' +
                    codegenGetType($request->orderId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
    public static function deleteOrder($request)
    {
        $errors = [];
        if (!isset($request->orderId)) {
            $error = [
                'orderId' => 'orderId is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->orderId) &&
            codegenGetType($request->orderId) !== 'integer'
        ) {
            $error = [
                'orderId' =>
                    'orderId must be integer : ' +
                    codegenGetType($request->orderId),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // This can only be done by the logged in user.
    public static function createUser($request)
    {
        $errors = [];
        if (isset($request->body)) {
            $errors['body']['attrs'] = DefinitionFactory::factory(
                'User'
            )->validate($request->body);
        }
        return $errors;
    }

    // Creates list of users with given input array
    public static function createUsersWithArrayInput($request)
    {
        $errors = [];
        return $errors;
    }

    // Creates list of users with given input array
    public static function createUsersWithListInput($request)
    {
        $errors = [];
        return $errors;
    }

    // Logs user into the system
    public static function loginUser($request)
    {
        $errors = [];
        if (!isset($request->username)) {
            $error = [
                'username' => 'username is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->username) &&
            codegenGetType($request->username) !== 'string'
        ) {
            $error = [
                'username' =>
                    'username must be string : ' +
                    codegenGetType($request->username),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (!isset($request->password)) {
            $error = [
                'password' => 'password is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->password) &&
            codegenGetType($request->password) !== 'string'
        ) {
            $error = [
                'password' =>
                    'password must be string : ' +
                    codegenGetType($request->password),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // Logs out current logged in user session
    public static function logoutUser($request)
    {
        $errors = [];
        return $errors;
    }

    // Get user by user name
    public static function getUserByName($request)
    {
        $errors = [];
        if (!isset($request->username)) {
            $error = [
                'username' => 'username is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->username) &&
            codegenGetType($request->username) !== 'string'
        ) {
            $error = [
                'username' =>
                    'username must be string : ' +
                    codegenGetType($request->username),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }

    // This can only be done by the logged in user.
    public static function updateUser($request)
    {
        $errors = [];
        if (!isset($request->username)) {
            $error = [
                'username' => 'username is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->username) &&
            codegenGetType($request->username) !== 'string'
        ) {
            $error = [
                'username' =>
                    'username must be string : ' +
                    codegenGetType($request->username),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        if (isset($request->body)) {
            $errors['body']['attrs'] = DefinitionFactory::factory(
                'User'
            )->validate($request->body);
        }
        return $errors;
    }

    // This can only be done by the logged in user.
    public static function deleteUser($request)
    {
        $errors = [];
        if (!isset($request->username)) {
            $error = [
                'username' => 'username is required',
            ];
            throw new \Exception(json_encode($error), 422);
        }
        if (
            isset($request->username) &&
            codegenGetType($request->username) !== 'string'
        ) {
            $error = [
                'username' =>
                    'username must be string : ' +
                    codegenGetType($request->username),
            ];
            throw new \Exception(json_encode($error), 422);
        }

        return $errors;
    }
}
